Provide me a Helm Chart for a simple Java application and a mongoDB.

The Helm Chart for a simple Java application and a mongoDB would look something like this:

apiVersion: v1
kind: Chart
metadata:
  name: my-java-app
  version: 0.1.0
  description: A basic Java application and MongoDB deployment

# This is the Chart's main configuration
# It's a combination of user-supplied values and templated resources
# that will be deployed to a Kubernetes cluster

# Chart dependencies
dependencies:
  - name: mongo
    version: "3.5.2"
    repository: "https://kubernetes-charts.storage.googleapis.com"

# Specify which Kubernetes objects to deploy
# Here, we are deploying a Deployment and a Service
# for our Java application, as well as a StatefulSet
# and Service for our MongoDB

# Java application
resources:
  - name: my-java-app-deployment
    type: Deployment
    apiVersion: apps/v1
    spec:
      selector:
        matchLabels:
          app: my-java-app
      template:
        metadata:
          labels:
            app: my-java-app
        spec:
          containers:
            - name: my-java-app
              image: java:8
              command: ["java", "-jar", "my-java-app.jar"]
              ports:
                - containerPort: 8080
              env:
                - name: MONGO_HOST
                  value: "{{ .Values.mongo.host }}"
                - name: MONGO_PORT
                  value: "{{ .Values.mongo.port }}"
  - name: my-java-app-service
    type: Service
    apiVersion: v1
    spec:
      selector:
        app: my-java-app
      ports:
        - port: 8080
          targetPort: 8080

# MongoDB
  - name: mongo-statefulset
    type: StatefulSet
    apiVersion: apps/v1
    spec:
      selector:
        matchLabels:
          app: mongo
      template:
        metadata:
          labels:
            app: mongo
        spec:
          containers:
            - name: mongo
              image: mongo
              command: ["mongod", "--replSet", "rs0", "--bind_ip", "0.0.0.0"]
              ports:
                - containerPort: 27017
  - name: mongo-service
    type: Service
    apiVersion: v1
    spec:
      selector:
        app: mongo
      ports:
        - port: 27017
          targetPort: 27017

# Values to be passed into the templates
values:
  mongo:
    host: mongo.default.svc.cluster.local
    port: 27017